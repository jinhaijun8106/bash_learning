set tabstop=4
set shiftwidth=4
set softtabstop=4
set number
set showcmd
set smarttab
set cursorline
"filetype indent on
set wildmenu
set lazyredraw
set showmatch
set incsearch
set hlsearch
nnoremap <leader><space> :nohlsearch<CR>
set paste
set expandtab

" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

set runtimepath^=~/.vim/bundle/ctrlp.vim
source ~/.vim/plugins/cscope_maps.vim
setlocal cm=blowfish2
colorscheme badwolf
syntax enable

call plug#begin('~/.vim/bundle')
  Plug 'mhinz/vim-rfc'
  Plug 'vim-scripts/rfc-syntax', { 'for': 'rfc' } " optional syntax highlighting for RFC files
call plug#end()


function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /* call LoadCscope()

"et hlsearch
"highlight ExtraWhitespace ctermbg=red guibg=red
"ighlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
" Show trailing whitespace:
"match ExtraWhitespace /\s\+$/
" Show trailing whitespace and spaces before a tab:
"match ExtraWhitespace /\s\+$\| \+\ze\t/
" Show tabs that are not at the start of a line:
"match ExtraWhitespace /[^\t]\zs\t\+/
" Show spaces used for indenting (so you use only tabs for indenting).
"match ExtraWhitespace /^\t*\zs \+/
execute pathogen#infect()
autocmd BufEnter * EnableStripWhitespaceOnSave
set background=dark
